{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, validateTime } from '../internals';\nimport { Clock } from '../internals/components/icons';\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\nimport { extractValidationProps } from '../internals/utils/validation';\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  var _defaultizedProps$amp, _defaultizedProps$slo2;\n  const localeText = useLocaleText();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const viewRenderers = _extends({\n    hours: null,\n    minutes: null,\n    seconds: null\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\n\n  // Props with the default values specific to the desktop variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    viewRenderers,\n    slots: _extends({\n      field: TimeField,\n      openPickerIcon: Clock\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref,\n          ampm: defaultizedProps.ampm\n        });\n      },\n      toolbar: _extends({\n        hidden: true,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useDesktopPicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nDesktopTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * 12h/24h view for hour selection clock.\r\n   * @default `utils.is12HourCycleInCurrentLocale()`\r\n   */\n  ampm: PropTypes.bool,\n  /**\r\n   * Display ampm controls under the clock (instead of in the toolbar).\r\n   * @default true on desktop, false on mobile\r\n   */\n  ampmInClock: PropTypes.bool,\n  /**\r\n   * If `true`, the main element is focused during the first mount.\r\n   * This main element is:\r\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\r\n   * - the `input` element if there is a field rendered.\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * Class name applied to the root element.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * If `true`, the popover or modal will close after submitting the full date.\r\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\r\n   * Overridable components.\r\n   * @default {}\r\n   * @deprecated Please use `slots`.\r\n   */\n  components: PropTypes.object,\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   * @deprecated Please use `slotProps`.\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * The default value.\r\n   * Used when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n  /**\r\n   * Do not ignore date part when validating min/max time.\r\n   * @default false\r\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\r\n   * If `true`, the open picker button will not be rendered (renders only the field).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\r\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n  /**\r\n   * Format of the date when rendered in the input(s).\r\n   * Defaults to localized format based on the used `views`.\r\n   */\n  format: PropTypes.string,\n  /**\r\n   * Density of the format when rendered in the input.\r\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\r\n   * @default \"dense\"\r\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\r\n   * The label content.\r\n   */\n  label: PropTypes.node,\n  /**\r\n   * Locale for components texts.\r\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\r\n   */\n  localeText: PropTypes.object,\n  /**\r\n   * Maximal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\n  maxTime: PropTypes.any,\n  /**\r\n   * Minimal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\n  minTime: PropTypes.any,\n  /**\r\n   * Step over minutes.\r\n   * @default 1\r\n   */\n  minutesStep: PropTypes.number,\n  /**\r\n   * Callback fired when the value is accepted.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The value that was just accepted.\r\n   */\n  onAccept: PropTypes.func,\n  /**\r\n   * Callback fired when the value changes.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The new value.\r\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see `open`).\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback fired when the error associated to the current value changes.\r\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\r\n   *\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TError} error The new error describing why the current value is not valid.\r\n   * @param {TValue} value The value associated to the error.\r\n   */\n  onError: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see `open`).\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * Callback fired when the selected sections change.\r\n   * @param {FieldSelectedSections} newValue The new selected sections.\r\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\r\n   * Callback fired on view change.\r\n   * @template TView\r\n   * @param {TView} view The new view.\r\n   */\n  onViewChange: PropTypes.func,\n  /**\r\n   * Control the popup or dialog open state.\r\n   * @default false\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * The default visible view.\r\n   * Used when the component view is not controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\r\n   * The currently selected sections.\r\n   * This prop accept four formats:\r\n   * 1. If a number is provided, the section at this index will be selected.\r\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\r\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\r\n   * 4. If `null` is provided, no section will be selected\r\n   * If not provided, the selected sections will be handled internally.\r\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\r\n   * Disable specific clock time.\r\n   * @param {number} clockValue The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   * @deprecated Consider using `shouldDisableTime`.\r\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\r\n   * Disable specific time.\r\n   * @param {TDate} value The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.object,\n  /**\r\n   * Overridable component slots.\r\n   * @default {}\r\n   */\n  slots: PropTypes.object,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The selected value.\r\n   * Used when the component is controlled.\r\n   */\n  value: PropTypes.any,\n  /**\r\n   * The visible view.\r\n   * Used when the component view is controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\r\n   * Define custom view renderers for each section.\r\n   * If `null`, the section will only have field editing.\r\n   * If `undefined`, internally defined view will be the used.\r\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\r\n   * Available views.\r\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { DesktopTimePicker };","map":{"version":3,"names":["_extends","React","PropTypes","resolveComponentProps","singleItemValueManager","TimeField","useTimePickerDefaultizedProps","useLocaleText","validateTime","Clock","useDesktopPicker","extractValidationProps","DesktopTimePicker","forwardRef","inProps","ref","_defaultizedProps$amp","_defaultizedProps$slo2","localeText","defaultizedProps","viewRenderers","hours","minutes","seconds","ampmInClock","props","slots","field","openPickerIcon","slotProps","ownerState","_defaultizedProps$slo","ampm","toolbar","hidden","renderPicker","valueManager","valueType","getOpenDialogAriaText","openTimePickerDialogue","validator","propTypes","bool","autoFocus","className","string","closeOnSelect","components","object","componentsProps","defaultValue","any","disabled","disableFuture","disableIgnoringDatePartForTimeValidation","disableOpenPicker","disablePast","format","formatDensity","oneOf","inputRef","oneOfType","func","shape","current","label","node","maxTime","minTime","minutesStep","number","onAccept","onChange","onClose","onError","onOpen","onSelectedSectionsChange","onViewChange","open","openTo","orientation","readOnly","selectedSections","endIndex","isRequired","startIndex","shouldDisableClock","shouldDisableTime","sx","arrayOf","value","view","views"],"sources":["C:/Users/user/Desktop/OracleWHOLE/oracle-db-tool/demo/esf-tool/oracle-db-front/node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { resolveComponentProps } from '@mui/base/utils';\r\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\r\nimport { TimeField } from '../TimeField';\r\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\r\nimport { useLocaleText, validateTime } from '../internals';\r\nimport { Clock } from '../internals/components/icons';\r\nimport { useDesktopPicker } from '../internals/hooks/useDesktopPicker';\r\nimport { extractValidationProps } from '../internals/utils/validation';\r\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\r\n  var _defaultizedProps$amp, _defaultizedProps$slo2;\r\n  const localeText = useLocaleText();\r\n\r\n  // Props with the default values common to all time pickers\r\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\r\n  const viewRenderers = _extends({\r\n    hours: null,\r\n    minutes: null,\r\n    seconds: null\r\n  }, defaultizedProps.viewRenderers);\r\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;\r\n\r\n  // Props with the default values specific to the desktop variant\r\n  const props = _extends({}, defaultizedProps, {\r\n    ampmInClock,\r\n    viewRenderers,\r\n    slots: _extends({\r\n      field: TimeField,\r\n      openPickerIcon: Clock\r\n    }, defaultizedProps.slots),\r\n    slotProps: _extends({}, defaultizedProps.slotProps, {\r\n      field: ownerState => {\r\n        var _defaultizedProps$slo;\r\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\r\n          ref,\r\n          ampm: defaultizedProps.ampm\r\n        });\r\n      },\r\n      toolbar: _extends({\r\n        hidden: true,\r\n        ampmInClock\r\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\r\n    })\r\n  });\r\n  const {\r\n    renderPicker\r\n  } = useDesktopPicker({\r\n    props,\r\n    valueManager: singleItemValueManager,\r\n    valueType: 'time',\r\n    getOpenDialogAriaText: localeText.openTimePickerDialogue,\r\n    validator: validateTime\r\n  });\r\n  return renderPicker();\r\n});\r\nDesktopTimePicker.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * 12h/24h view for hour selection clock.\r\n   * @default `utils.is12HourCycleInCurrentLocale()`\r\n   */\r\n  ampm: PropTypes.bool,\r\n  /**\r\n   * Display ampm controls under the clock (instead of in the toolbar).\r\n   * @default true on desktop, false on mobile\r\n   */\r\n  ampmInClock: PropTypes.bool,\r\n  /**\r\n   * If `true`, the main element is focused during the first mount.\r\n   * This main element is:\r\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\r\n   * - the `input` element if there is a field rendered.\r\n   */\r\n  autoFocus: PropTypes.bool,\r\n  /**\r\n   * Class name applied to the root element.\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * If `true`, the popover or modal will close after submitting the full date.\r\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\r\n  closeOnSelect: PropTypes.bool,\r\n  /**\r\n   * Overridable components.\r\n   * @default {}\r\n   * @deprecated Please use `slots`.\r\n   */\r\n  components: PropTypes.object,\r\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   * @deprecated Please use `slotProps`.\r\n   */\r\n  componentsProps: PropTypes.object,\r\n  /**\r\n   * The default value.\r\n   * Used when the component is not controlled.\r\n   */\r\n  defaultValue: PropTypes.any,\r\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\r\n  disableFuture: PropTypes.bool,\r\n  /**\r\n   * Do not ignore date part when validating min/max time.\r\n   * @default false\r\n   */\r\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\r\n  /**\r\n   * If `true`, the open picker button will not be rendered (renders only the field).\r\n   * @default false\r\n   */\r\n  disableOpenPicker: PropTypes.bool,\r\n  /**\r\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\r\n  disablePast: PropTypes.bool,\r\n  /**\r\n   * Format of the date when rendered in the input(s).\r\n   * Defaults to localized format based on the used `views`.\r\n   */\r\n  format: PropTypes.string,\r\n  /**\r\n   * Density of the format when rendered in the input.\r\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\r\n   * @default \"dense\"\r\n   */\r\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\r\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\r\n    current: PropTypes.object\r\n  })]),\r\n  /**\r\n   * The label content.\r\n   */\r\n  label: PropTypes.node,\r\n  /**\r\n   * Locale for components texts.\r\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\r\n   */\r\n  localeText: PropTypes.object,\r\n  /**\r\n   * Maximal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\r\n  maxTime: PropTypes.any,\r\n  /**\r\n   * Minimal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\r\n  minTime: PropTypes.any,\r\n  /**\r\n   * Step over minutes.\r\n   * @default 1\r\n   */\r\n  minutesStep: PropTypes.number,\r\n  /**\r\n   * Callback fired when the value is accepted.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The value that was just accepted.\r\n   */\r\n  onAccept: PropTypes.func,\r\n  /**\r\n   * Callback fired when the value changes.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The new value.\r\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see `open`).\r\n   */\r\n  onClose: PropTypes.func,\r\n  /**\r\n   * Callback fired when the error associated to the current value changes.\r\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\r\n   *\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TError} error The new error describing why the current value is not valid.\r\n   * @param {TValue} value The value associated to the error.\r\n   */\r\n  onError: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see `open`).\r\n   */\r\n  onOpen: PropTypes.func,\r\n  /**\r\n   * Callback fired when the selected sections change.\r\n   * @param {FieldSelectedSections} newValue The new selected sections.\r\n   */\r\n  onSelectedSectionsChange: PropTypes.func,\r\n  /**\r\n   * Callback fired on view change.\r\n   * @template TView\r\n   * @param {TView} view The new view.\r\n   */\r\n  onViewChange: PropTypes.func,\r\n  /**\r\n   * Control the popup or dialog open state.\r\n   * @default false\r\n   */\r\n  open: PropTypes.bool,\r\n  /**\r\n   * The default visible view.\r\n   * Used when the component view is not controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\r\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\r\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\r\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\r\n  readOnly: PropTypes.bool,\r\n  /**\r\n   * The currently selected sections.\r\n   * This prop accept four formats:\r\n   * 1. If a number is provided, the section at this index will be selected.\r\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\r\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\r\n   * 4. If `null` is provided, no section will be selected\r\n   * If not provided, the selected sections will be handled internally.\r\n   */\r\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\r\n    endIndex: PropTypes.number.isRequired,\r\n    startIndex: PropTypes.number.isRequired\r\n  })]),\r\n  /**\r\n   * Disable specific clock time.\r\n   * @param {number} clockValue The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   * @deprecated Consider using `shouldDisableTime`.\r\n   */\r\n  shouldDisableClock: PropTypes.func,\r\n  /**\r\n   * Disable specific time.\r\n   * @param {TDate} value The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   */\r\n  shouldDisableTime: PropTypes.func,\r\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.object,\r\n  /**\r\n   * Overridable component slots.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.object,\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\r\n  /**\r\n   * The selected value.\r\n   * Used when the component is controlled.\r\n   */\r\n  value: PropTypes.any,\r\n  /**\r\n   * The visible view.\r\n   * Used when the component view is controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\r\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\r\n  /**\r\n   * Define custom view renderers for each section.\r\n   * If `null`, the section will only have field editing.\r\n   * If `undefined`, internally defined view will be the used.\r\n   */\r\n  viewRenderers: PropTypes.shape({\r\n    hours: PropTypes.func,\r\n    minutes: PropTypes.func,\r\n    seconds: PropTypes.func\r\n  }),\r\n  /**\r\n   * Available views.\r\n   */\r\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\r\n};\r\nexport { DesktopTimePicker };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}